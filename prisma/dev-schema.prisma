// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider     = "sqlite"
  url          = "file:./dev.sqlite"
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Assignment {
  id             Int          @id @default(autoincrement())
  min            Int?
  max            Int?
  skuId          Int
  sku            Sku          @relation(fields: [skuId], references: [id])
  pickLocationId Int          @unique
  pickLocation   PickLocation @relation(fields: [pickLocationId], references: [id])

  @@index([skuId])
}

model Sku {
  id          Int          @id @default(autoincrement())
  name        String
  putawayType String?
  width       Int
  length      Int
  height      Int
  weight      Int
  onHand      Int
  price       Decimal
  assignment  Assignment[]
}

model PickLocation {
  id          Int         @id @default(autoincrement())
  name        String
  putawayType String
  width       Int
  length      Int
  height      Int
  maxWeight   Int
  assignment  Assignment?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
